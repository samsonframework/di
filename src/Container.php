<?php
/**
 * Created by Vitaly Iegorov <egorov@samsonos.com>.
 * on 26.01.16 at 15:11
 */
namespace samsonframework\di;

use samsonframework\di\exception\ContainerException;

class Container extends AbstractContainer
{
    /** Variable name for storing services */
    const STATIC_COLLECTION_VARIABLE = '$services';

    /** @var array[string] Collection of loaded services */
    protected $services = array();

    /**
     * Set service dependency. Upon first creation of this class instance
     * it would be used everywhere where this dependency is needed.
     *
     * @param string $className  Fully qualified class name
     * @param array  $parameters Collection of parameters needed for dependency creation
     * @param string $alias      Dependency name
     *
     * @return $this Chaining
     */
    public function service($className, array $parameters, $alias = null)
    {
        $this->services[$className] = $className;

        return $this->set($className, $parameters, $alias);
    }

    /**
     * {@inheritdoc}
     */
    public function set($className, array $parameters, $alias = null)
    {
        // Merge other class constructor parameters
        $this->dependencies[$className] = $parameters;

        // Store alias for this class name
        $this->aliases[$className] = $alias ?: $className;
    }

    /**
     * Generate initial class instance declaration
     * @param string $className Entity class name
     */
    protected function generateInitialDeclaration($className)
    {
        if (array_key_exists($className, $this->services)) {
            // Start service search or creation
            $this->generator
                ->text('isset('.self::STATIC_COLLECTION_VARIABLE.'[\''.$this->aliases[$className].'\'])')
                ->newLine('? '.self::STATIC_COLLECTION_VARIABLE.'[\''.$this->aliases[$className].'\']')
                ->newLine(': '.self::STATIC_COLLECTION_VARIABLE.'[\''.$this->aliases[$className].'\'] = new '.$className.'(')->tabs++;
        } else {
            // Start object instance creation
            $this->generator->text('new ' . $className . '(')->tabs++;
        }
    }

    /**
     * Parse class dependencies generated by dependency tree.
     *
     * @param mixed $dependency Dependency value
     * @param string $variable Dependency name
     * @param string $className
     *
     * @throws ContainerException
     */
    protected function parseClassDependencies($dependency, $variable, $className)
    {
        // If dependency value is a string
        if (is_string($dependency)) {
            // Define if we have this dependency described in dependency tree
            if (array_key_exists($dependency, $this->dependencies)) {
                // Call container logic for this dependency
                $this->generator->newLine($this->logicCallable.'(\''.$dependency.'\')');
            } else { // String variable
                $this->generator->newLine()->stringValue($dependency);
            }
        } elseif (is_array($dependency)) { // Dependency value is array
            $this->generator->newLine()->arrayValue($dependency);
        } else {
            throw new ContainerException('Cannot set dependency for '.$className . '::' . $variable);
        }
    }

    /**
     * Generate container dependency condition code.
     *
     * @param string $className
     * @param mixed  $dependencies
     * @param int    $level
     *
     * @throws ContainerException
     *
     */
    protected function generateCondition($className, &$dependencies, $level = 0)
    {
        $this->generator->newLine(($level === 0) ? 'return ' : '');

        $this->generateInitialDeclaration($className);

        // Get last dependency variable name
        end($dependencies);
        $last = key($dependencies);

        // Iterate all dependencies for this class
        foreach ($dependencies as $variable => $dependency) {
            $this->parseClassDependencies($dependency, $variable, $className);

            // Add comma if this is not last dependency
            if ($variable !== $last) {
                $this->generator->text(',');
            }
        }

        $this->generator->tabs--;

        if (count($dependencies)) {
            $this->generator->newLine(')' . ($level === 0 ? ';' : ''));
        } else {
            $this->generator->text(')' . ($level === 0 ? ';' : ''));
        }
    }
}
